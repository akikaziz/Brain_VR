//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.0
//     from Assets/VRInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @VRInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @VRInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VRInputActions"",
    ""maps"": [
        {
            ""name"": ""VRControls"",
            ""id"": ""0ac28df7-44d4-4b97-8f4c-774e4ce64fc6"",
            ""actions"": [
                {
                    ""name"": ""ExplodeAction"",
                    ""type"": ""Button"",
                    ""id"": ""380b249c-746e-4081-9e50-8810eeb51917"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReturnAction"",
                    ""type"": ""Button"",
                    ""id"": ""e00e8fcb-6bb6-41d1-b781-9dbe5a13f8d3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""49fff954-a165-4af7-bc7c-b831f083b8f1"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExplodeAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02efa197-2754-4d55-bcc8-70eda24899dc"",
                    ""path"": ""<XRController>{RightHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReturnAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // VRControls
        m_VRControls = asset.FindActionMap("VRControls", throwIfNotFound: true);
        m_VRControls_ExplodeAction = m_VRControls.FindAction("ExplodeAction", throwIfNotFound: true);
        m_VRControls_ReturnAction = m_VRControls.FindAction("ReturnAction", throwIfNotFound: true);
    }

    ~@VRInputActions()
    {
        UnityEngine.Debug.Assert(!m_VRControls.enabled, "This will cause a leak and performance issues, VRInputActions.VRControls.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // VRControls
    private readonly InputActionMap m_VRControls;
    private List<IVRControlsActions> m_VRControlsActionsCallbackInterfaces = new List<IVRControlsActions>();
    private readonly InputAction m_VRControls_ExplodeAction;
    private readonly InputAction m_VRControls_ReturnAction;
    public struct VRControlsActions
    {
        private @VRInputActions m_Wrapper;
        public VRControlsActions(@VRInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ExplodeAction => m_Wrapper.m_VRControls_ExplodeAction;
        public InputAction @ReturnAction => m_Wrapper.m_VRControls_ReturnAction;
        public InputActionMap Get() { return m_Wrapper.m_VRControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VRControlsActions set) { return set.Get(); }
        public void AddCallbacks(IVRControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_VRControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VRControlsActionsCallbackInterfaces.Add(instance);
            @ExplodeAction.started += instance.OnExplodeAction;
            @ExplodeAction.performed += instance.OnExplodeAction;
            @ExplodeAction.canceled += instance.OnExplodeAction;
            @ReturnAction.started += instance.OnReturnAction;
            @ReturnAction.performed += instance.OnReturnAction;
            @ReturnAction.canceled += instance.OnReturnAction;
        }

        private void UnregisterCallbacks(IVRControlsActions instance)
        {
            @ExplodeAction.started -= instance.OnExplodeAction;
            @ExplodeAction.performed -= instance.OnExplodeAction;
            @ExplodeAction.canceled -= instance.OnExplodeAction;
            @ReturnAction.started -= instance.OnReturnAction;
            @ReturnAction.performed -= instance.OnReturnAction;
            @ReturnAction.canceled -= instance.OnReturnAction;
        }

        public void RemoveCallbacks(IVRControlsActions instance)
        {
            if (m_Wrapper.m_VRControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IVRControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_VRControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VRControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public VRControlsActions @VRControls => new VRControlsActions(this);
    public interface IVRControlsActions
    {
        void OnExplodeAction(InputAction.CallbackContext context);
        void OnReturnAction(InputAction.CallbackContext context);
    }
}
